(def a 1)
(def b 2)
a b +

(def swap (var a b (num)) b a)
(def swap1 (var a b) b a)

1 2 swap
"b" 2 swap
"a" "b" swap1
"c"

(def drop (var x))

(def drop2 drop drop)
(def drop4 drop2 drop2)
(def drop8 drop4 drop4)

drop8

2 1 3 + eq [100] [200] ifte

1 3 + 2 eq ["a"] ["b"] ifte

(def fib (var x) x 2 gt [x 1 - fib x 2 - fib +] [1] ifte)

20 fib

(def tailtest
    (var n (num) res (num))
    n 0 lt
    [0]
    [
        n 0 eq
        [1]
        [
            n 1 eq
            [res]
            [n 1 - n res / tailtest]
            ifte
        ]
        ifte
    ]
    ifte)

//50000 2 tailtest

//drop8

(def dup (var x) x x)

[fib] (var fib1)

{ 20 fib1 ! }


//(def apply121 (var f (num -> num)) f !)

(def apply121 (var f ({t} t -> t)) f !)


20 fib1 apply121

(var r)

// dup
// dup
// drop8
// drop4


50 & [5 +] map (var ary0)


ary0 45 33 &<
ary0 45 &>

ary0 [20 gt] filter (var ary1)

ary0 size
ary1 size

ary1 [+] reduce

ary1














