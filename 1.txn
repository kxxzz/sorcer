(def a 1)
(def b 2)
a b +

(def swap (var a b (num)) b a)
(def swap1 (var a b) b a)

1 2 swap
(swap "b" 2)
(swap 1 2)
"a" "b" swap1
"c"

(def drop (var x))

(def drop2 drop drop)
(def drop4 drop2 drop2)
(def drop8 drop4 drop4)

drop8

gc

(if (eq 2 (+ 1 3)) 100 200)

(if (eq (+ 1 3) 2) "a" "b")

(def fib (var x) (if (gt x 2) (+ (fib (- x 1)) (fib (- x 2))) 1))

20 fib

(fib 20)

(def tailtest
    (var n (num) res (num))
    (if (lt n 0)
        0
        (if (eq n 0)
            1
            (if (eq n 1)
                res
                (tailtest (- n 1) (/ n res))))))

//50000 2 tailtest

//(tailtest 50000 2)

//drop8

(def dup (var x) x x)

[fib] (var fib1)

(fib1 20)

{ 20 fib1 ! }


//(def apply121 (var f (num -> num)) f !)

(def apply121 (var f ({t} t -> t)) f !)


20 fib1 apply121

(var r)

// dup
// dup
// drop8
// drop4


(& 50) [5 +] map (var ary)

gc


(&< ary 45 33)
(&> ary 45)


ary [20 gt] filter (var ary1)

ary size
ary1 size

ary1 [+] reduce

ary1














